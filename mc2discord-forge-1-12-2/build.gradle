//file:noinspection SpellCheckingInspection
apply from: '../properties.gradle'

buildscript {
    repositories {
        gradlePluginPortal()
        maven { url = 'https://maven.minecraftforge.net' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath group: 'gradle.plugin.com.github.johnrengelman', name: 'shadow', version: '7.1.0'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'com.github.johnrengelman.shadow'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.projectVersion
group = project.projectGroup
archivesBaseName = project.modid + '-forge-1.12.2'

java.toolchain.languageVersion = JavaLanguageVersion.of(8) // Mojang ships Java 8 to end users.

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'

    runs {
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            arg 'nogui'
            singleInstance true
        }
    }
}

repositories {
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    shadow('ml.denisd3d:mc2discord-core')

    implementation(group: 'io.netty', name: 'netty-all') {
        version {
            strictly '4.1.65.Final'
        }
    } // Fix compatibility between Minecraft & Reactor netty version in dev

    //DISCORD
    shadow(group: 'com.discord4j', name: 'discord4j-core', version: project.discord4jVersion) {}

    //CONFIG
    shadow(group: 'com.github.denisd3d', name: 'config4j', version: '1.0.1') {
        exclude(group: 'com.electronwill.night-config', module: 'core')
    }

    shadow(group: 'com.electronwill.night-config', name: 'toml', version: '3.6.0')

    //UTILS
    shadow(group: 'com.vdurmont', name: 'emoji-java', version: '5.1.1')
    shadow(group: 'org.apache.commons', name: 'commons-collections4', version: '4.0') // Account


    configurations.implementation.extendsFrom(configurations.shadow)
}

jar {
    classifier 'slim'
    manifest {
        attributes([
                "Specification-Title"   : "Mc2discord",
                "Specification-Vendor"  : "DenisD3D",
                "Specification-Version" : "1",
                "Implementation-Title"  : project.name,
                "Implementation-Version": project.version,
                "Implementation-Vendor" : "DenisD3D",
        ])
    }
}

shadowJar {
    classifier ''

    configurations = [project.configurations.shadow]

    relocate('discord4j', repackGroup + 'discord4j')
    relocate('com.austinv11.servicer', repackGroup + 'com.austinv11.servicer')
    relocate('com.discord4j', repackGroup + 'com.discord4j')
    relocate('com.fasterxml.jackson', repackGroup + 'com.fasterxml.jackson')
    relocate('com.iwebpp', repackGroup + 'com.iwebpp')
    relocate('com.vdurmont.emoji', repackGroup + 'com.vdurmont.emoji')
    relocate('com.github.benmanes.caffeine', repackGroup + 'com.github.benmanes.caffeine')
    relocate('com.google.errorprone', repackGroup + 'com.google.errorprone')
    relocate('io.netty', repackGroup + 'io.netty')
    relocate('org.apache.commons.logging', repackGroup + 'org.apache.commons.logging')
    relocate('org.apache.commons.codec', repackGroup + 'org.apache.commons.codec')
    relocate('org.apache.logging.slf4j', repackGroup + 'org.apache.logging.slf4j')
    relocate('org.checkerframework', repackGroup + 'org.checkerframework')
    relocate('org.json', repackGroup + 'org.json')
    relocate('org.reactivestreams', repackGroup + 'org.reactivestreams')
    relocate('org.slf4j', repackGroup + 'org.slf4j')
    relocate('reactor', repackGroup + 'reactor')
    relocate('ml.denisd3d.config4j', repackGroup + 'ml.denisd3d.config4j')
    relocate('org.apache.commons.collections4', repackGroup + 'org.apache.commons.collections4')

    exclude('META-INF/services/**') // Fix compatibility with geckolib
    exclude('**/module-info.class')
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

jar.finalizedBy('reobfJar')