//file:noinspection SpellCheckingInspection
buildscript {
    dependencies {
        // Can't use the newer 'plugins' block for Mixin, need to use the old 'apply plugin' method
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
    }
}

plugins {
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
}
apply plugin: 'org.spongepowered.mixin'
apply from: '../properties.gradle'

// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.projectVersion
group = project.projectGroup
archivesBaseName = project.modid + '-forge-1.19.x'

java.toolchain.languageVersion = JavaLanguageVersion.of(17) // Mojang ships Java 17 to end users.

mixin {
    add sourceSets.main, "mixins.mc2discord.refmap.json"
    config "mixins.mc2discord.json"
}

minecraft {
    mappings channel: 'official', version: '1.19.1'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        server {
            workingDirectory file('run_server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            arg "-mixin.config=mixins.mc2discord.json"
            arg 'nogui'
            singleInstance true
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                mc2discord {
                    source sourceSets.main
                }
            }
        }
        client {
            workingDirectory file('run_client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'info'
            arg "-mixin.config=mixins.mc2discord.json"
            singleInstance true
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${buildDir}/createSrgToMcp/output.srg"

            mods {
                mc2discord {
                    source sourceSets.main
                }
            }
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

repositories {
    mavenCentral()
    maven { url = 'https://jitpack.io' }
}

dependencies {
    minecraft('net.minecraftforge:forge:1.19.1-42.0.1')

    library('ml.denisd3d:mc2discord-core')

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor' // Mixin

    implementation(group: 'io.netty', name: 'netty-all') {
        version {
            strictly '4.1.65.Final'
        }
    } // Fix compatibility between Minecraft & Reactor netty version in dev

    //DISCORD
    library(group: 'com.discord4j', name: 'discord4j-core', version: project.discord4jVersion)

    //CONFIG
    library(group: 'com.github.denisd3d', name: 'config4j', version: '1.0.1') {
        exclude(group: 'com.electronwill.night-config', module: 'core')
    }

    //UTILS
    library(group: 'com.vdurmont', name: 'emoji-java', version: '5.1.1')
    library(group: 'org.apache.commons', name: 'commons-collections4', version: '4.0') // Account
}

jar {
    classifier 'slim'
    manifest {
        attributes(["Specification-Title"   : "Mc2discord",
                    "Specification-Vendor"  : "DenisD3D",
                    "Specification-Version" : "1",
                    "Implementation-Title"  : project.name,
                    "Implementation-Version": project.version,
                    "Implementation-Vendor" : "DenisD3D",
                    "MixinConfigs"          : "mc2discord.mixins.json"])
    }
}

shadowJar {
    classifier ''

    configurations = [project.configurations.library]

    relocate('discord4j', repackGroup + 'discord4j')
    relocate('com.austinv11.servicer', repackGroup + 'com.austinv11.servicer')
    relocate('com.discord4j', repackGroup + 'com.discord4j')
    relocate('com.fasterxml.jackson', repackGroup + 'com.fasterxml.jackson')
    relocate('com.iwebpp', repackGroup + 'com.iwebpp')
    relocate('com.vdurmont.emoji', repackGroup + 'com.vdurmont.emoji')
    relocate('com.github.benmanes.caffeine', repackGroup + 'com.github.benmanes.caffeine')
    relocate('com.google.errorprone', repackGroup + 'com.google.errorprone')
    relocate('io.netty', repackGroup + 'io.netty')
    relocate('org.apache.commons.logging', repackGroup + 'org.apache.commons.logging')
    relocate('org.apache.commons.codec', repackGroup + 'org.apache.commons.codec')
    relocate('org.apache.logging.slf4j', repackGroup + 'org.apache.logging.slf4j')
    relocate('org.checkerframework', repackGroup + 'org.checkerframework')
    relocate('org.json', repackGroup + 'org.json')
    relocate('org.reactivestreams', repackGroup + 'org.reactivestreams')
    relocate('org.slf4j', repackGroup + 'org.slf4j')
    relocate('reactor', repackGroup + 'reactor')
    relocate('ml.denisd3d.config4j', repackGroup + 'ml.denisd3d.config4j')
    relocate('org.apache.commons.collections4', repackGroup + 'org.apache.commons.collections4')

    exclude('META-INF/services/**') // Fix compatibility with geckolib
}

reobf {
    shadowJar {
        dependsOn createMcpToSrg
        mappings = createMcpToSrg.outputs.files.singleFile
    }
}

jar.finalizedBy('reobfJar')